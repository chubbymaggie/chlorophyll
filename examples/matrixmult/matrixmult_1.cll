void main() {
  int[]@{[0:36]} A[36];
  int[]@{[0:36]} B[36];
  int[]@{[0:36]} C[36];
  int sum;

  int ii;
  int kk;
  ii = 0;

  for(i from 0 to 6) {
    sum = 0;
    for(j from 0 to 6) {
      kk = 0;
      for(k from 0 to 6) {
	      sum = A[ii+k] * B[kk+j];
        kk = kk + 6;
      }
      C[ii + j] = sum;
    }
    ii = ii + 6;
  }

}

/* woonsen
=== Final Solution ===
void main() {
  int[]@{[0:36]=14} A[36];
  int[]@{[0:36]=14} B[36];
  int[]@{[0:36]=10} C[36];
  int@14 sum;
  int@14 ii;
  int@14 kk;
  ii = 0;
  for(i from 0 to 6)@any {
    sum = 0;
    for(j from 0 to 6)@any {
      kk = 0;
      for(k from 0 to 6)@any {
        sum = (A[(ii +@14 k)] *@14 B[(kk +@14 j)]);
        kk = (kk +@14 6);
      }

      C[(ii +@10 j)] = sum;
    }

    ii = (ii +@14 6);
  }

}

core = 0, space = 0, ops = #<set:>
core = 1, space = 0, ops = #<set:>
core = 2, space = 0, ops = #<set:>
core = 3, space = 0, ops = #<set:>
core = 4, space = 0, ops = #<set:>
core = 5, space = 0, ops = #<set:>
core = 6, space = 0, ops = #<set:>
core = 7, space = 0, ops = #<set:>
core = 8, space = 0, ops = #<set:>
core = 9, space = 0, ops = #<set:>
core = 10, space = 199, ops = #<set:>
core = 11, space = 0, ops = #<set:>
core = 12, space = 0, ops = #<set:>
core = 13, space = 0, ops = #<set:>
core = 14, space = 418, ops = #<set:>
core = 15, space = 0, ops = #<set:>
core = 16, space = 0, ops = #<set:>
core = 17, space = 0, ops = #<set:>
core = 18, space = 0, ops = #<set:>
core = 19, space = 0, ops = #<set:>
72
partitioning time = 25
*/
