void main() {
  // N (width) = 40, M (height) = 3
  // W = 1, K = 16
  int[] ssd[120];
  int[] l[120];
  int[] r[120];
  int N, M;
  N = 40;

  //for(int m = W/2; m < M - W/2; m++) { // row
  for(m from 1 to 2) {
    //for(int n = K + W/2; n < N - W/2; n++) { // column
    for(n from 17 to 39) {
      int min;
      min = 100000;
      int index;
      index = -1;

      //for(int k = 0; k < K; k++) {
      for(k from 0 to 16) {
        int sum;
        sum = 0;
        //for(int i = m - W/2; i <= m + W/2; i++) { // row
        int i;
        i = m - 1;
        while(i <= m + 1) {
          //for(int j = n - W/2; j <= n + W/2; j++) { // column
          int j;
          j = n - 1;
          while(j <= n + 1) {
            if(j - k >= 0) {
              sum = (l[i*N + j] - r[i*N + j-k]) * (l[i*N + j] - r[i*N + j-k]) + sum;
              if(min > sum) {
                min = sum;
                index = k;
              }
            }
          }
        }
      }
      ssd[m*N + n] = index;
    }
  }
}

/*
# msgs = 281600220
# synthesis time = 2756 s = 45 min

core = 0, space = 178, ops = #<set:>
core = 1, space = 212, ops = #<set:>
core = 2, space = 0, ops = #<set:>
core = 3, space = 184, ops = #<set:>
core = 4, space = 0, ops = #<set:>
core = 5, space = 146, ops = #<set:>
core = 6, space = 244, ops = #<set:>
core = 7, space = 244, ops = #<set:>
core = 8, space = 232, ops = #<set:>
core = 9, space = 178, ops = #<set:>
core = 10, space = 0, ops = #<set:>
core = 11, space = 244, ops = #<set:>
core = 12, space = 178, ops = #<set:>
core = 13, space = 244, ops = #<set:>
core = 14, space = 244, ops = #<set:>
core = 15, space = 244, ops = #<set:>

void@(#<syntax sym-place> . 0) main() {
  int@{[0:32]=12, [32:64]=0, [64:96]=9, [96:120]=5} ssd;
  int@{[0:32]=14, [32:64]=6, [64:96]=7, [96:120]=8} l;
  int@{[0:32]=13, [32:64]=11, [64:96]=15, [96:120]=1} r;
  int@3 (N M);
  N= 40@3
  for(m from 1 to 2)@place(any) {
    for(n from 17 to 39)@place(any) {
      int@3 (min);
      min= 100000@3
      int@8 (index);
      index= (-@8 1@8)
      for(k from 0 to 16)@place(any) {
        int@3 (sum);
        sum= 0@3
        int@3 (i);
        i= (m -@3 1@3)
        (i <=@3 (m +@3 1@3))) {
          int@3 (j);
          j= (n -@3 1@3)
          (j <=@3 (n +@3 1@3))) {
            if(((j -@3 k) >=@3 0@3)) {
              sum= (((l[((i *@3 N) +@3 j)] -@3 r[(((i *@3 N) +@3 j) -@3 k)]) *@3 (l[((i *@3 N) +@3 j)] -@3 r[(((i *@3 N) +@3 j) -@3 k)])) +@3 sum)
              if((min >@3 sum)) {
                min= sum
                index= k
              }
            }
          }
        }
      }

      ssd[((m *@3 N) +@3 n)]= index
    }

  }

}
*/
