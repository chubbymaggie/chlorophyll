void main() {
  int[]@{[0:36]} A[36];
  int[]@{[0:36]} B[36];
  int[]@{[0:36]} C[36];
  int sum;

  for(i from 0 to 36) {
    A[i] = in();
  }
  
  for(i from 0 to 36) {
    B[i] = in();
  }

  for(i from 0 to 6) {
    for(j from 0 to 6) {
      sum = 0;  
      for(k from 0 to 6) {
	      sum = sum + A[6*i+k] * B[6*k+j];
      }
      C[6*i + j] = sum;
    }
  }

  for(i from 0 to 36) {
    out(C[i]);
  }
}

/* woonsen cap = 512
=== Final Solution ===
void main() {
  int[]@{[0:36]=19} A[36];
  int[]@{[0:36]=19} B[36];
  int[]@{[0:36]=17} C[36];
  int@19 sum;
  for(i from 0 to 36)@any {
    A[i] = in();
  }

  for(i from 0 to 36)@any {
    B[i] = in();
  }

  for(i from 0 to 6)@any {
    for(j from 0 to 6)@any {
      sum = 0;
      for(k from 0 to 6)@any {
        sum = (sum +@19 (A[((6 *@19 i) +@19 k)] *@19 B[((6 *@19 k) +@19 j)]));
      }

      C[((6 *@17 i) +@17 j)] = sum;
    }

  }

  for(i from 0 to 36)@any {
    out(C[i]);
  }

}

core = 0, space = 0, ops = #<set:>
core = 1, space = 0, ops = #<set:>
core = 2, space = 0, ops = #<set:>
core = 3, space = 0, ops = #<set:>
core = 4, space = 0, ops = #<set:>
core = 5, space = 0, ops = #<set:>
core = 6, space = 0, ops = #<set:>
core = 7, space = 0, ops = #<set:>
core = 8, space = 0, ops = #<set:>
core = 9, space = 0, ops = #<set:>
core = 10, space = 0, ops = #<set:>
core = 11, space = 0, ops = #<set:>
core = 12, space = 0, ops = #<set:>
core = 13, space = 0, ops = #<set:>
core = 14, space = 0, ops = #<set:>
core = 15, space = 0, ops = #<set:>
core = 16, space = 0, ops = #<set:>
core = 17, space = 219, ops = #<set:>
core = 18, space = 0, ops = #<set:>
core = 19, space = 433, ops = #<set:>
36
partitioning time = 28
*/

/* cap = 256
=== Final Solution ===
void main() {
  int[]@{[0:36]=5} A[36];
  int[]@{[0:36]=13} B[36];
  int[]@{[0:36]=16} C[36];
  int@16 sum;
  for(i from 0 to 36)@any {
    A[i] = in();
  }

  for(i from 0 to 36)@any {
    B[i] = in();
  }

  for(i from 0 to 6)@any {
    for(j from 0 to 6)@any {
      sum = 0;
      for(k from 0 to 6)@any {
        sum = (sum +@16 (A[((6 *@5 i) +@5 k)] *@13 B[((6 *@13 k) +@13 j)]));
      }

      C[((6 *@16 i) +@16 j)] = sum;
    }

  }

  for(i from 0 to 36)@any {
    out(C[i]);
  }

}

core = 0, space = 0, ops = #<set:>
core = 1, space = 0, ops = #<set:>
core = 2, space = 0, ops = #<set:>
core = 3, space = 0, ops = #<set:>
core = 4, space = 0, ops = #<set:>
core = 5, space = 235, ops = #<set:>
core = 6, space = 0, ops = #<set:>
core = 7, space = 0, ops = #<set:>
core = 8, space = 0, ops = #<set:>
core = 9, space = 0, ops = #<set:>
core = 10, space = 0, ops = #<set:>
core = 11, space = 0, ops = #<set:>
core = 12, space = 0, ops = #<set:>
core = 13, space = 248, ops = #<set:>
core = 14, space = 0, ops = #<set:>
core = 15, space = 0, ops = #<set:>
core = 16, space = 249, ops = #<set:>
core = 17, space = 0, ops = #<set:>
core = 18, space = 0, ops = #<set:>
core = 19, space = 0, ops = #<set:>
432
partitioning time = 91
*/

/* cap = 300
=== Final Solution ===
void main() {
  int[]@{[0:36]=5} A[36];
  int[]@{[0:36]=13} B[36];
  int[]@{[0:36]=16} C[36];
  int@13 sum;
  for(i from 0 to 36)@any {
    A[i] = in();
  }

  for(i from 0 to 36)@any {
    B[i] = in();
  }

  for(i from 0 to 6)@any {
    for(j from 0 to 6)@any {
      sum = 0;
      for(k from 0 to 6)@any {
        sum = (sum +@13 (A[((6 *@5 i) +@5 k)] *@13 B[((6 *@13 k) +@13 j)]));
      }

      C[((6 *@16 i) +@16 j)] = sum;
    }

  }

  for(i from 0 to 36)@any {
    out(C[i]);
  }

}

core = 0, space = 0, ops = #<set:>
core = 1, space = 0, ops = #<set:>
core = 2, space = 0, ops = #<set:>
core = 3, space = 0, ops = #<set:>
core = 4, space = 0, ops = #<set:>
core = 5, space = 235, ops = #<set:>
core = 6, space = 0, ops = #<set:>
core = 7, space = 0, ops = #<set:>
core = 8, space = 0, ops = #<set:>
core = 9, space = 0, ops = #<set:>
core = 10, space = 0, ops = #<set:>
core = 11, space = 0, ops = #<set:>
core = 12, space = 0, ops = #<set:>
core = 13, space = 262, ops = #<set:>
core = 14, space = 0, ops = #<set:>
core = 15, space = 0, ops = #<set:>
core = 16, space = 219, ops = #<set:>
core = 17, space = 0, ops = #<set:>
core = 18, space = 0, ops = #<set:>
core = 19, space = 0, ops = #<set:>
252
partitioning time = 33
*/
