// -*- c -*-

# 13 --> 507 // main
# 16 --> 506

# 1 --> 406
# 2 --> 408

//filter
# 11 --> 508 
# 10 --> 509
# 12 --> 510
# 9  --> 511

//print
# 40 --> 600
# 50 --> 607

module Hmm(init_x, init_y, init_z,init_pi,init_a1, init_a2, init_b1, init_b2, init_b3, init_b4) {
# 15 --> 201 // s
# 25 --> 202 // f
# 23 --> 101 // S*A
# 17 --> 100 // a
# 22 --> 200 // a

# 7  --> 003 // b1
# 5  --> 002 // b2
# 6  --> 001 // b3
# 27 --> 000 // b3
# 8  --> 103 // B

# 14 --> 104 // pi
# 24 --> 102 // ord, temp
# 18 --> 301 // proc_out
# 30 --> 204 // proc_input

// derive group
# 0 --> 205
# 1 --> 305
# 2 --> 206
# 3 --> 105

fix3_t@{[0:14]=1} quantizerMap_x[14] = init_x;
fix3_t@{[0:14]=2} quantizerMap_y[14] = init_y;
fix3_t@{[0:14]=3} quantizerMap_z[14] = init_z;

fix1_t@7 b1[28] = init_b1;
fix1_t@5 b2[28] = init_b2;
fix1_t@6 b3[28] = init_b3;
fix1_t@27 b4[28] = init_b4;

fix1_t@17 a1[24] = init_a1;
fix1_t@22 a2[40] = init_a2;

fix1_t@14 pi[8] = init_pi;
fix1_t@25 f[8];
fix1_t@15 s[8];
int@24 started;

actor* get_b4;
fix1_t@6 get_b4(int@27 i) {
  return b4[i -@27 84];
}

actor* get_b3;
fix1_t@5 get_b3(int@6 i) {
  fix1_t@6 ret;
  if(i <@6 84) {
    ret = b3[i -@6 56];
  } else {
    ret = get_b4(i);
  }
  return ret;
}

actor* get_b2;
fix1_t@7 get_b2(int@5 i) {
  fix1_t@5 ret;
  if(i <@5 56) {
    ret = b2[i -@5 28];
  } else {
    ret = get_b3(i);
  }
  return ret;
}

actor* get_b;
fix1_t@8 get_b(int@7 i) {
  fix1_t@7 ret;
  if(i <@7 28) {
    ret = b1[i];
  } else {
    ret = get_b2(i);
  }
  return ret;

}

actor* get_a2;
fix1_t@17 get_a2(int@22 i) {
  return a2[i -@22 24];
}

actor* get_a;
fix1_t@23 get_a(int@17 i) {
  fix1_t@17 ret;
  if(i <@17 24) {
    ret = a1[i];
  } else {
    ret = get_a2(i);
  }
  return ret;
}

actor* forward_proc_inc;
int@30 forward_proc_inc(int@8 o){
  fix1_t@23 sum;
  fix1_t@24 ord;
  fix1_t@24 temp;
  fix1_t xxx;
  ord = 0;
  //if(started <@8 0) {
  if(started <@15 0) {
    for (k from 0 to 8) {
      sum = 0;
      for (l from 0 to 8) {
        sum = sum +@23 s[l] *@23 get_a((l <<@23 3) +@23 k);
      }
      temp = sum *@24 get_b((o <<@8 3) +@8 k);
      f[k] = temp;
      ord = ord |@24 temp;
    }
  }else{
    started = -1;
    for (l from 0 to 8) {
      f[l] = pi[l] *@8 get_b((o <<@8 3) +@8 l);
    }
    ord = -1;
  }
  return ord;
}

actor* derive_group;
int@30 derive_group(fix3_t::3@(0,0,0) acc){
  fix3_t@1 x;
  fix3_t@2 y;
  fix3_t@3 z;
  x = acc::0;
  y = acc::1;
  z = acc::2;

  fix3_t@0 minDist; minDist = 3;//0b11111111;
  int@0 minGroup;
  //int@4 ret;

  fix3_t@0 dx;
  fix3_t@0 dy;
  fix3_t@0 dz;
  fix3_t@0 d;

  for (i from 0 to 14){
    dx = (quantizerMap_x[i] -@1 x) **2@1;
    dy = (quantizerMap_y[i] -@2 y) **2@2;
    dz = (quantizerMap_z[i] -@3 z) **2@3;

    //dx = calc_dx(i, acc::0);
    //dy = calc_dy(i, acc::1);
    //dz = calc_dz(i, acc::2);

    d = dx +@0 dy +@0 dz;
    if (d <@0 minDist){
      minDist = d;
      minGroup = i;
    }
  }

  //ret = minGroup;
  return minGroup;
  //ret = forward_proc_inc(minGroup);
  //return ret;
}

fix1_t forward_proc_out() {
  fix1_t@18 prob;
  prob = 0;
  started = 0;
  for (i from 0 to 8){
    prob = prob +@18 s[i];
  }
  return prob;
}

void swap_shift(int n){
  for (i from 0 to 8){
    s[i] = f[i] <<@25 n;
    //print(s[i]);
  }
}

int input(fix3_t::3@(18,18,18) acc){
  return forward_proc_inc(derive_group(acc));
}

}

hmm1 = new Hmm(
//Quantizer x
{0.356597900390625, 0.00003, 0.0, -0.25215279352309594, -0.356597900390625, -0.252152793523096, 0.020068359375, 0.2521527935230959, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//Quantizer y
{0.0, 0.00003, 0.0, 0.0, 0.0, 0.0, -0.019786241319444446, 0.0, 0.356597900390625, 0.25215279352309594, -0.25215279352309594, -0.356597900390625, -0.252152793523096, 0.2521527935230959},
//Quantizer z
{0.0, 0.00003, 0.356597900390625, 0.25215279352309594, 0.0, -0.25215279352309594, -0.5404134114583333, -0.252152793523096, 0.0, 0.25215279352309594, 0.25215279352309594, 0.0, -0.25215279352309594, -0.252152793523096},
//PI
{0.99999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
// A1
{0.33333333333333315, 0.33333333333333315, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333334, 0.3333333333333334, 0.3333333333333334, 0.0, 0.0, 0.0},
// A2
{0.0, 0.0, 0.0, 0.3333333333333334, 0.3333333333333334, 0.3333333333333334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333334, 0.3333333333333334, 0.3333333333333334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33333333333333326, 0.33333333333333326, 0.33333333333333326, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99999},
//B1
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017100907866730367, 0.03438960331375165, 0.023217079338940193, 0.00031, 0.00089, 0.0025560050275140202, 0.009223524349753199, 0.0709774994821351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//B2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9828287216020155, 0.9647617018601434, 0.9747820972769512, 0.9937228968389041, 0.9886178089174174, 0.9794780257501665, 0.9651196277103652, 0.8997866335473412},
//B3
{0.00007, 0.00085, 0.0020008233841086872, 0.0059676684982251735, 0.010496669575208855, 0.017965969222319623, 0.025656847939881443, 0.029235866970523647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//B4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
)@REG(001,307);

hmm2 = new Hmm(
//Quantizer x
{0.3298527644230769, 0.2332411265166865, 0.0, -0.23324112651668644, -0.3298527644230769, -0.23324112651668652, 0.05824016702586207, 0.2119738520408163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//Quantizer y
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.021290746228448277, -0.002242107780612245, 0.3298527644230769, 0.2332411265166865, -0.23324112651668644, -0.3298527644230769, -0.23324112651668652, 0.2332411265166864},
//Quantizer z
{0.0, 0.23324112651668644, 0.3298527644230769, 0.2332411265166865, 0.0, -0.23324112651668644, -0.6113533809267241, -0.3731066645408163, 0.0, 0.23324112651668644, 0.2332411265166865, 0.0, -0.23324112651668644, -0.23324112651668652},
//PI
{0.99999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
// A1
{0.3333333333333332, 0.3333333333333332, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 0.0, 0.0, 0.0},
// A2
{0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49999999999999994, 0.49999999999999994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99999},
//B1
{0.00021, 0.002119168249879038, 0.004272402088452072, 0.010600678738575783, 0.01528288042528797, 0.020399304788210545, 0.019373846099704103, 0.008270286482579265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//B2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6642982399214641, 0.5989981350285817, 0.589854088015694, 0.5673677361613156, 0.5589734803240906, 0.5521535342889395, 0.5596586442258219, 0.6047587061987426},
//B3
{0.33549066532298727, 0.3988826967215392, 0.40587350989585386, 0.4220315851001086, 0.42574363925062153, 0.42744716092284984, 0.42096750967447394, 0.3869710073186779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//B4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
)@REG(008,314);


fix3_t@9 filter_ref_x;
fix3_t@9 filter_ref_y;
fix3_t@9 filter_ref_z;

int@13 filter(fix3_t@11 x_in, fix3_t@11 y_in, fix3_t@11 z_in){

  // node 5
  fix3_t@10 abs;
  abs = x_in **2@11 +@11 y_in**2@11 +@11 z_in**2@11;

  // node 6
  int@10 ret2;

  ret2 = 0;
  if (abs >@10 0.09){
    ret2 = 1;
  }
  if (abs <@10 0.01){
    ret2 = 1;
  }

  // node @12

  fix3_t@12 x;
  fix3_t@12 y;
  fix3_t@12 z;

  x = x_in;
  y = y_in;
  z = z_in;


  int@12 ret;
  ret = ret2;
  //fix3_t idle_sensitivity = 0.1;//0.3;

  //fix3_t@12 def_sensitivity;
  //def_sensitivity = 0.4;//0.5;

  if (ret){
    ret = 0;
    if (x <@9 filter_ref_x -@9 0.2){
      ret = 1;
    }
    if (x >@9 filter_ref_x +@9 0.2){
      ret = 1;
    }
    if (y <@9 filter_ref_y -@9 0.2){
      ret = 1;
    }
    if (y >@9 filter_ref_y +@9 0.2){
      ret = 1;
    }
    if (z <@9 filter_ref_z -@9 0.2){
      ret = 1;
    }
    if (z >@9 filter_ref_z +@9 0.2){
      ret = 1;
    }
  }

  // node 6
  if (ret){
    filter_ref_x = x;
    filter_ref_y = y;
    filter_ref_z = z;
  }

  return ret;
}

void emit_1(int@40 n){
  if (n &@40 1){
    set_io(600, SINK);
  }else{
    set_io(600, SOURCE);
  }
  delay_unext(600, 904);
}

int emit_8(int@40 n){
  emit_1(0);
  for (i from 0 to 8){
    emit_1(n);
    n = n >>@40 1;
  }
  emit_1(1);
  return n;
}

void print(int@40 w) {
  int@40 x;
  x = emit_8(0);
  w = emit_8(w);
  w = emit_8(w);
  w = emit_8(w);
}

fix3_t@50 convert(int@50 x) {
  if(x >@50 32768) {
    x = 65536 -@50 x;
  } else {
    x = -@50 x;
  }
  return x;
}

int@16 iter;

void main(){

  int@13 ord;
  int@1 ord1;
  int@2 ord2;
  int@16 n;
  fix3_t::3@(50,50,50) raw;
  fix3_t::3@(13,13,13) acc;
  //fix1_t@16 out_fix1, out_fix2;
  
  acc::0 = convert(raw::0);
  acc::1 = convert(raw::1);
  acc::2 = convert(raw::2);

  if (filter(acc::0, acc::1, acc::2) != 0){
    ord1 = hmm1.input(acc);
    ord2 = hmm2.input(acc);
    ord = ord1 |@13 ord2;
    n = 0;
    
    while (ord >@13 0){
      n = n +@16 1;
      ord = ord <<@13 1;
    }
    if (n >@16 3){
      n = n -@16 3;
    } else {
      n = 0;
    }
    hmm1.swap_shift(n);
    hmm2.swap_shift(n);
  }

  iter = iter +@16 1;
  if(iter >@16 1000) {
    iter = 0;
    /*out_fix1 = hmm1.forward_proc_out();
    out_fix2 = hmm2.forward_proc_out();
    print(out_fix1);
    print(out_fix2);*/
    print(hmm1.forward_proc_out());
    print(hmm2.forward_proc_out());
  }
}
