TODO
- stuck at debug core 406 :(
- test if, md5
- check define repeating
    ;; core 16
    (aforth 
      ;; list
      (list 
        (vardecl '(0 0 0 0))
        (funcdecl "leftrotate"
          ;; list
          (list 
            (block
              "up b! @b 1 b! !b up b! @b 2 b! !b up b! @b "
              0 1 (restrict #t #f #f #f)
              "up b! @b 1 b! !b up b! @b 2 b! !b up b! @b ")
            (block
              "0 b! !b 2 b! @b 16 0 b! @b - 1 + + "
              1 2 (restrict #t #f #f #f)
              "0 b! !b 2 b! @b 16 0 b! @b - 1 + + ")
            (ift 
              ;; list
              (list 
                (block
                  "-1 + "
                  1 1 (restrict #t #f #f #f)
                  "-1 + ")
                (forloop 
                  (block
                    ""
                    0 0 (restrict #t #f #f #f)
                    "")
                  ;; list
                  (list 
                    (block
                      "2/ "
                      1 1 (restrict #t #f #f #f)
                      "2/ ")
                  )
                  #f #f #f)
                (block
                  "dup "
                  1 2 (restrict #t #f #f #f)
                  "dup ")
              )
            )
            (block
              "drop up b! !b 1 b! @b 16 0 b! @b - 1 + + "
              2 2 (restrict #t #f #f #f)
              "drop up b! !b 1 b! @b 16 0 b! @b - 1 + + ")
            (ift 
              ;; list
              (list 
                (block
                  "-1 + "
                  1 1 (restrict #t #f #f #f)
                  "-1 + ")
                (forloop 
                  (block
                    ""
                    0 0 (restrict #t #f #f #f)
                    "")
                  ;; list
                  (list 
                    (block
                      "2/ "
                      1 1 (restrict #t #f #f #f)
                      "2/ ")
                  )
                  #f #f #f)
                (block
                  "dup "
                  1 2 (restrict #t #f #f #f)
                  "dup ")
              )
            )
            (block
              "drop up b! !b "
              2 0 (restrict #t #f #f #f)
              "drop up b! !b ")
          )
        )
        (funcdecl "sumrotate"
          ;; list
          (list 
            (funccall "leftrotate")
          )
        )
        (funcdecl "main"
          ;; list
          (list 
            (forloop 
              (block
                "0 "
                0 1 (restrict #t #f #f #f)
                "0 ")
              ;; list
              (list 
                (funccall "sumrotate")
                (block
                  ""
                  0 0 (restrict #t #f #f #f)
                  "")
              )
              '(#f . #f) 0 1)
          )
        )
      )
    4 18 #hash((0 . 0) (1 . 1) (2 . 2) (3 . 3) (4 . 4)))
{block 962}
( -) # 106 ( mem 4) 0 org | cr
0 , 0 , 0 , 0 , | br
: 6rep = $0 | cr
  -1 . + | cr
  | cr
  for | cr
    2/ next | cr
  dup = $0 ; | cr
: 7rep = $0 | cr
  b! @b 16 0 b! @b - 1 . + . + | cr
  .. if 6rep then | cr
  drop up b! !b = $0 ; | cr
: leftrotate = $0 | cr
  up b! @b 1 b! !b up b! @b 2 b! !b up b! @b | cr
  0 b! !b 2 7rep | cr
  1 7rep | cr
  = $0 ; | cr
: sumrotate = $0 leftrotate = $0 ; | cr
: main = $0 | cr
  0 | cr
  for sumrotate | cr
    next warm = $0 ; | cr

( -) # 306 ( mem 4) 0 org | cr
0 , 0 , 0 , 0 , | br
: 14rep = $4 | cr
  b! !b down b! @b 2 b! = $0 ; | cr
: 13rep = $9 | cr
  -1 . + | cr
  for 2* next | cr
  over - and . + 65535 and = $0 ; | cr
: leftrotate = $10 | cr
  down b! @b 1 14rep | cr
  !b down b! @b | cr
  0 b! !b down b! @b 1 b! @b 0 b! @b | cr
  13rep | cr
  left 14rep | cr
  @b | cr
  0 b! @b 13rep | cr
  down b! !b = $0 ; | cr
: sumrotate = $0 | cr
  right b! @b left b! !b leftrotate = $0 ; | cr
: main = $2b | cr
  0 | cr
  for sumrotate | cr
    next warm = $0 ; | cr
why 0 b! @b is not included in 13rep?

- optimize md5, run optimized md5 on IDE
- generate node 900 & 902
- merge block after define-repeating-seq
- md5: 998, 1002, 1006 + repeat more
- connect to rohin's interpreter
  = left, right, up, down
  = 0 , 0 , 0 ,
- or tikhon's
  = word for starting to execute

- kill z3 when user break happens
- longest subsequence
- nop is less than everything, @ < @+
- stat report
- 3 a! @ 32 - 1 . + . + 0 . + a! @
  = implement an abstract interpreter to just figure how many send and recv we need
  = no need to generate first pair from the interpreter

- reset rosette when solving new problem (see compiler.rkt)
- known type interpreter
  = for-array2-error.cll should have compile error: other variable (e.g. i) can't be at the same place ast clustered array

- dependency analysis to do parallel loop
- data type check (x[i] + y) when y is array
- visitor-divider can't handle nested indexes (eg. +@place(x[i*n+j]))

- refactoring interpretor & flow & comminsert
- master/slave block,function,array (tests/for-array2)

- topological sort
- recursion
- general for?
- for-array-fancy.cll
- @h inside for (x[i] +@h y[i])
- do we have to support int@any x?
  might need one more pass to get inferred place (e.g. @any)
- check if printing for @any make sense
- really need to be careful about for/parfor
  need better data dependency analysis (prefixsum, convolution)
- space estimator: if local var inside a loop -> no space required
- annotation that says split array into x chunks without specify the partitions.
   int[]@{split=4} x; 
- should we allow a == b? Right now, no.
   int[]@{[0:30]=a,[30:50]=b}

ISSUE ABOUT RACKET
- branch master
- email emina about smaller example
- after the error is gone, do perf test again (partial vs no partial)

SYMBOLIC DICT
- symbolic set or lower space to 4
  vector v of set s
  (vector-ref v i) -> (ite cond (set *) (set * /))
  (set-add (vector-ref v i) %) => ERROR

MINI-PROJECTS
- optimization: SSE, dead code elimiation

MEMO
- same VarDecl => same sym-place!!!

BENCHMARKS
- insertion sort
- add
- md5 (RUNNING: no partial, RUN: partial)
- matrix multiply (2D?)

RUN
- 1D convolution (better analysis)
- prefixsum (better analysis)
- ssd (multiple copies) in laptop?

future
- blackscholes (float, log, exp)
- mergesort (function, recursion)
- FFT
