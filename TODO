TODO
- optimize entire function (test first)
- circular array (test first)
- opportunity to optimize (better layout)

{block 856}
( -) # 314 ( id 28 mem 3) 0 org | cr
0 , 0 , 0 , | br
: 1if = $0 | cr
  .. -if dup or a! @+ push @ dup pop !+ !+ a a or a! ! 262128 . + ; ] then drop = $0 ; | cr
: leftrotate = $0 push 0 a! !+ !+ pop dup - 17 . + 1if a a or a! @+ @ 373 b! !b !b dup !b drop = $0 ; | cr
: sumrotate = $0 373 a! @ 469 b! @ @b leftrotate = $0 ; | cr
: main = $0 | cr
  63 for | cr
    sumrotate next warm = $0 ; | cr

{block 858}
( -) # 315 ( id 29 mem 0) 0 org | cr
| br
: sumrotate = $0 left b! @b right b! !b = $0 ; | cr
: main = $0 | cr
  63 for | cr
    sumrotate next warm = $0 ; | cr

{block 860}
( -) # 316 ( id 30 mem 0) 0 org | cr
| br
: sumrotate = $0 right b! @b left b! !b = $0 ; | cr
: main = $0 | cr
  63 for | cr
    sumrotate next warm = $0 ; | cr

{block 862}
( -) # 317 ( id 31 mem 2) 0 org | cr
4 , 11 , 16 , 23 , 4 , 11 , 16 , 23 , 4 , 11 , 16 , 23 , 4 , 11 , 16 , 23 , 6 , 10 , 15 , 21 , 6 , 10 , 15 , 21 , 6 , 10 , 15 , 21 , 6 , 10 , 15 , 21 , | br
: sumrotate = $0 up b! @b right b! !b = $0 ; | cr
: main = $0 | cr
  31 for | cr
    sumrotate next | cr
  31 over - dup or a! for | cr
    @+ a push 325 b! !b sumrotate pop a! next warm = $0 ; | cr

- after rohin fixes "; ]": test iterative refinement on md5
- reuse memory space (variables of different loops that are not on stack at the same time)
- clustered array and function
- optimize MD5 more

REORGANIZATION
- forth-interpreter: merge dev with master, and make dev master
- hardcoded path in forth-interpreter cache
- greensyn: make dev master
- planet forth-interpreter

MISC
- data type check (x[i] + y) when y is array
- visitor-divider can't handle nested indexes (eg. +@place(x[i*n+j]))
- test for-array-fancy.cll

FASTER PARTITIONER
- infer each function first (see issue about racket)
* iterative feedback for MD5
  = call rohin's compiler to get program size
    + if size > 64 words -> define-repeating-code for shorter seq
  = connect to rohin's interpreter
    + left, right, up, down
    + 0 , 0 , 0 ,

ISSUE ABOUT RACKET
- incremental solving not working
- branch debug

MEMO
- same VarDecl => same sym-place!!!

BENCHMARKS
* faster sqrt
- matrix multiply
- insertion sort
- mergesort (function, recursion)
- disparity
- transpose
- DP (activity scheduling)
- fibonacci 
- shortest path
- MST
- DFS, BFS
- heap
- blackscholes (float, log, exp)
- FFT
