TODO
- fix evalution at many places

- declaration inside block
  for {
    int x = 0;
  }
  (matrixmultiply caching)
- general for?
- for-array-fancy.cll
- @h inside for (x[i] +@h y[i])
- do we have to support int@any x?
  might need one more pass to get inferred place (e.g. @any)
- check if printing for @any make sense
- really need to be careful about for/parfor
  need better data dependency analysis (prefixsum, convolution)
- space estimator: if local var inside a loop -> no space required
- annotation that says split array into x chunks without specify the partitions.
   int[]@{split=4} x; 
- should we allow a == b? Right now, no.
   int[]@{[0:30]=a,[30:50]=b}
- precise abstract interpret?


SYMBOLIC DICT
- symbolic set or lower space to 4
  vector v of set s
  (vector-ref v i) -> (ite cond (set *) (set * /))
  (set-add (vector-ref v i) %) => ERROR

MEMO
- same VarDecl => same sym-place!!!

BENCHMARKS
- insertion sort
- add
- md5 without function and tuple
- matrix multiply

future
- 1D convolution (better analysis)
- prefixsum (better analysis)
- md5 (function)
- ssd (multiple copies)
- mergesort (function)
- matrixmultiply (2D)
- FFT
- balckscholes (float)
