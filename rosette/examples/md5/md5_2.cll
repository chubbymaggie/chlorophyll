int leftrotate(int x, int r) {
  return (x << r) || (x >> (32 - r));
  /*
    if(32 - r > 0) {
    return (x << r) || (((1 << 31) & x) >> (31 - r)) ^ (x >> (32 - r));
    } else {
    return x;
    }
   */
}

void main() {
  int[] k[64]; // full = 64 entries
  int[] r[64];
  int[] message[16];
  
  int[] hash[4];
  int a, b, c, d, temp;
  int g;
  
  for(t from 0 to 16) {
    a = hash[0];
    b = hash[1];
    c = hash[2];
    d = hash[3];
    
    for(i from 0 to 16)@any {
	temp = (b && c) || (!b && d);
	temp = b + leftrotate(a + temp + k[i] + message[i], r[i]);
	a = d;
	d = c;
	c = b;
	b = temp;
    }
    
    g = 0;
    for(i from 16 to 32)@any {
	temp = (d && b) || (!d && c);
	temp = b + leftrotate(a + temp + k[i] + message[g], r[i]);
	a = d;
	d = c;
	c = b;
	b = temp;
	g = (g + 5) & 15;
    }
  
    g = 0;
    for(i from 32 to 48)@any {
	temp = b ^ c ^ d;
	temp = b + leftrotate(a + temp + k[i] + message[g], r[i]);
	a = d;
	d = c;
	c = b;
	b = temp;
	g = (g + 3) & 15;
    }
  
    g = 0;
    for(i from 48 to 64)@any {
	temp = c ^ (b || !d);
	temp = b + leftrotate(a + temp + k[i] + message[g], r[i]);
	a = d;
	d = c;
	c = b;
	b = temp;
	g = (g + 7) & 15;
    }

    hash[0] = hash[0] + a;
    hash[1] = hash[1] + b;
    hash[2] = hash[2] + c;
    hash[3] = hash[3] + d;
  }
}

// without function
// 32 iterations
// # messages = 1536
// # cores = 4
// 2745 sec = 45 min (kaopad)

// function + binary search
// 32 iterations
// # messages = 1024
// # cores = 5
// 519 sec

/*
// binary search (no partial)
// 64 iterations (matrix len = 64)
// # messages = 3072
// # cores = 6
// ?? sec = ?? min (woonsen)

// binary search (partial)
// 64 iterations (matrix len = 64)
// # messages = 3072
// # cores = 6
// 7613 sec = 126 min (kaopad)

----- fix inc-space & capacity = 512 -----
no partial
# messages = 3072
# cores = 4

<=    solve time
#f      219
13168   134
6552    102
3272    126 ==> 3072
2688    258
2880    562
2976    828

synthesis time = 6692 s = 111 min
*/

/*
core = 2, space = 416, ops = #<set:>
core = 3, space = 510, ops = #<set:>
core = 4, space = 0, ops = #<set:>
core = 5, space = 0, ops = #<set:>
core = 6, space = 248, ops = #<set:>
core = 7, space = 431, ops = #<set:>

int@3 leftrotate(int@3 x,int@3 r) {
  return ((x <<@3 r) ||@3 (x >>@3 (32 -@3 r)));
}

void main() {
  int[]@{[0:32]=2, [32:64]=2} k[64];
  int[]@{[0:32]=6, [32:64]=7} r[64];
  int[]@{[0:16]=7} message[16];
  int[]@{[0:4]=3} hash[4];
  int@3 temp, d, c, b, a;
  int@7 g;
*/
